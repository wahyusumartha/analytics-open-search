// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/ingest_event.go
//
// Generated by this command:
//
//	mockgen -source=./usecase/ingest_event.go -destination=./mock/usecase/ingest_event_mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	usecase "github.com/wahyusumartha/analytics-open-search/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockIngestEvent is a mock of IngestEvent interface.
type MockIngestEvent struct {
	ctrl     *gomock.Controller
	recorder *MockIngestEventMockRecorder
}

// MockIngestEventMockRecorder is the mock recorder for MockIngestEvent.
type MockIngestEventMockRecorder struct {
	mock *MockIngestEvent
}

// NewMockIngestEvent creates a new mock instance.
func NewMockIngestEvent(ctrl *gomock.Controller) *MockIngestEvent {
	mock := &MockIngestEvent{ctrl: ctrl}
	mock.recorder = &MockIngestEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngestEvent) EXPECT() *MockIngestEventMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIngestEvent) Execute(ctx context.Context, input usecase.EventInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockIngestEventMockRecorder) Execute(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIngestEvent)(nil).Execute), ctx, input)
}
