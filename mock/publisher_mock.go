// Code generated by MockGen. DO NOT EDIT.
// Source: component/message_broker/publisher.go
//
// Generated by this command:
//
//	mockgen -source=component/message_broker/publisher.go -destination=mock/publisher_mock.go
//

// Package mock_message_broker is a generated GoMock package.
package mock_message_broker

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPublisher is a mock of Publisher interface.
type MockPublisher[Message any, MessageOutput any] struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder[Message, MessageOutput]
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder[Message any, MessageOutput any] struct {
	mock *MockPublisher[Message, MessageOutput]
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher[Message any, MessageOutput any](ctrl *gomock.Controller) *MockPublisher[Message, MessageOutput] {
	mock := &MockPublisher[Message, MessageOutput]{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder[Message, MessageOutput]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher[Message, MessageOutput]) EXPECT() *MockPublisherMockRecorder[Message, MessageOutput] {
	return m.recorder
}

// Publish mocks base method.
func (m *MockPublisher[Message, MessageOutput]) Publish(ctx context.Context, message Message) (*MessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, message)
	ret0, _ := ret[0].(*MessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockPublisherMockRecorder[Message, MessageOutput]) Publish(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublisher[Message, MessageOutput])(nil).Publish), ctx, message)
}
